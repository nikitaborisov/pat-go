package pat

import (
	"crypto/rand"
	"fmt"

	"github.com/cloudflare/circl/group"
	"golang.org/x/crypto/cryptobyte"
)

// Linear-style DLEQ ZKPoK proofs, showing that:
// ( A_i ) = ( x_j ) ( B_{i,j} )
// A_i and B_{i,j} are public group elements
// x_j are secret scalars that you prove knowledge of

type DLEQProof struct {
	// one commitment per equation
	Commitments []group.Element
	// challenge, generated by Fiat-Shamir
	Challenge group.Scalar
	// one response per secret variable
	Responses []group.Scalar
}

// XXX: eliminate the last parameter when upgrading to the latest version of circl/group that has a .Group() method
func scalarVectorElementMatrixMul(x []group.Scalar, B [][]group.Element, g group.Group) []group.Element {
	result := make([]group.Element, len(B))
	for i, Bi := range B {
		result[i] = g.Identity()
		for j, Bij := range Bi {
			if Bij != nil {
				t := g.NewElement()
				t.Mul(Bij, x[j])
				result[i].Add(result[i], t)
			}
		}
	}
	return result
}

func VerifyProofParams(A []group.Element, B [][]group.Element, x []group.Scalar, g group.Group) error {
	if len(A) != len(B) {
		return fmt.Errorf("A (len %d) and B (len %d) must have the same length", len(A), len(B))
	}

	for i, v := range B {
		if len(v) != len(x) {
			return fmt.Errorf("B[%d] (len %d) must have the same length as x (len %d)", i, len(v), len(x))
		}
	}

	r := scalarVectorElementMatrixMul(x, B, g)
	for i, ri := range r {
		if !A[i].IsEqual(ri) {
			return fmt.Errorf("row %d not equal", i)
		}
	}

	return nil
}

func computeChallenge(A []group.Element, B [][]group.Element, commitments []group.Element, g group.Group, 
	dst []byte) (group.Scalar, error) {
	b := cryptobyte.NewBuilder(nil)

	for _, Ai := range A {
		Aienc, err := Ai.MarshalBinary()
		if err != nil {
			return nil, err
		}
		b.AddBytes(Aienc)
	}

	zeroEnc, err := g.Identity().MarshalBinary()
	if err != nil {
		return nil, err
	}

	for _, Bi := range B {
		for _, Bij := range Bi {
			if Bij == nil {
				b.AddBytes(zeroEnc)
			} else {
				Bijenc, err := Bij.MarshalBinary()
				if err != nil {
					return nil, err
				}
				b.AddBytes(Bijenc)
			}
		}
	}

	for _, Ci := range commitments {
		Cienc, err := Ci.MarshalBinary()
		if err != nil {
			return nil, err
		}
		b.AddBytes(Cienc)
	}

	hashInput := b.BytesOrPanic()

	return g.HashToScalar(hashInput, dst), nil
}

func ComputeProof(A []group.Element, B [][]group.Element, x []group.Scalar, g group.Group,
	dst []byte) (DLEQProof, error) {
	// step one: generate random scalars for each secret variable

	alpha := make([]group.Scalar, len(x))

	for i := range x {
		alpha[i] = g.RandomScalar(rand.Reader)
	}

	commitments := scalarVectorElementMatrixMul(alpha, B, g)

	challenge, err := computeChallenge(A, B, commitments, g, dst)
	if err != nil {
		return DLEQProof{}, err
	}

	responses := make([]group.Scalar, len(x))

	for i, xi := range x {
		responses[i] = g.NewScalar()
		responses[i].Mul(challenge, xi)
		responses[i].Add(responses[i], alpha[i])
	}

	return DLEQProof{
		Commitments: commitments,
		Challenge:   challenge,
		Responses:   responses,
	}, nil
}

// ignores p.Commitments and instead recomputes them from the responses, and verifies challenge equality
func VerifyProofCompact(p DLEQProof, A []group.Element, B [][]group.Element, g group.Group, dst []byte) (bool, error) {
	values := scalarVectorElementMatrixMul(p.Responses, B, g)

	commitments := make([]group.Element, len(B))
	for i, Ai := range A {
		// commitmets[i] = values / Ai^c
		t := g.NewElement()
		t.Mul(Ai, p.Challenge)
		t.Neg(t)
		commitments[i] = g.NewElement()
		commitments[i].Add(values[i], t)
	}

	challenge, err := computeChallenge(A, B, commitments, g, dst)
	if err != nil {
		return false, err
	}

	if challenge.IsEqual(p.Challenge) {
		return true, nil
	} else {
		return false, fmt.Errorf("challenge computation failed")
	}
}
